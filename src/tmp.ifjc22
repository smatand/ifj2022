.IFJcode22
call $skipOperations
label floatval
createframe
pushframe
defvar LF@_param # also retval
defvar LF@_type
defvar LF@_condition
pops LF@_param
move LF@_condition bool@false
type LF@_type LF@_param # int, bool, float, string or nil
jumpifeq floatval_end LF@_type string@float # no need to convert
jumpifeq int_to_float LF@_type string@int
jumpifeq bool_to_float LF@_type string@bool
move LF@_param float@0x0.0p+0
jump floatval_end
label bool_to_float
eq LF@_condition LF@_param bool@true
jumpifneq bool_false_to_float LF@_condition bool@true
move LF@_param float@0x1.0p+0
jump floatval_end
label bool_false_to_float
move LF@_param float@0x0.0p+0
jump floatval_end
label int_to_float
int2float LF@_param LF@_param
label floatval_end
pushs LF@_param
popframe
return

#checktype(var1,var2,operand)
#returns 1.var1,2.var2
label checktype
createframe
pushframe
defvar LF@$var1
defvar LF@$var2
defvar LF@$operand
defvar LF@type$var1
defvar LF@type$var2
pops LF@$operand
pops LF@$var2
pops LF@$var1
type LF@type$var1 LF@$var1
type LF@type$var2 LF@$var2
jumpifneq checkAdd LF@$operand string@add
label checkAdd
jumpifeq checkEnd LF@type$var1 LF@type$var2
label checkEnd
pushs LF@$var2
pushs LF@$var1
popframe
return


label $add
createframe
pushframe
defvar LF@$addRet
defvar LF@$add1
defvar LF@$add2
pops LF@$add1
pops LF@$add2
pushs LF@$add1
pushs LF@$add2
pushs string@add
call checktype
pops LF@$add1
pops LF@$add2
ADD LF@$addRet LF@$add1 LF@$add2
pushs LF@$addRet
popframe
return

label $skipOperations

####################
#### Expression ####
####################
createframe
pushframe
defvar LF@tmp1
move LF@tmp1 int@2
defvar LF@tmp2
move LF@tmp2 int@3
defvar LF@tmp3
pushs LF@tmp2
pushs LF@tmp1
call $add
pops LF@tmp3
write LF@tmp3
popframe
